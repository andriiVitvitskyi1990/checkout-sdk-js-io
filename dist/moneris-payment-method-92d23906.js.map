{"version":3,"file":"moneris-payment-method-92d23906.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/moneris-integration/src/MonerisPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { type CardInstrument, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst MonerisPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const containerId = `moneris-iframe-container`;\n\n    const { getHostedStoredCardValidationFieldset, getHostedFormOptions } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const initializeMonerisPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const paymentConfig = {\n                ...options,\n                moneris: {\n                    containerId,\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            };\n\n            return checkoutService.initializePayment(paymentConfig);\n        },\n        [containerId, getHostedFormOptions, checkoutService],\n    );\n\n    const validateInstrument = (_shouldShowNumber: boolean, selectedInstrument: CardInstrument) => {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    };\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMonerisPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n            validateInstrument={validateInstrument}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MonerisPaymentMethod,\n    [{ id: 'moneris' }],\n);\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","useHostedCreditCard","checkoutState","method","language","paymentForm","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","cardCode","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","compact","gateway","join","focusedFieldType","setFocusedFieldType","useState","getHostedStoredCardValidationFieldset","selectedInstrument","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","cardCodeId","undefined","cardNumberId","getHostedFormOptions","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","HostedWidgetPaymentComponent","Component","state","isAddingNewCard","handleDeleteInstrument","instruments","this","props","selectedInstrumentId","length","setState","getDefaultInstrumentId","handleUseNewCard","deinitializePayment","initializePayment","noop","gatewayId","methodId","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","onUnhandledError","setValidationSchema","getValidationSchema","initializeMethod","componentDidUpdate","prevProps","prevState","isPaymentDataRequired","componentWillUnmount","deinitializeCustomer","setSubmit","render","hideWidget","isInitializing","isAccountInstrument","isLoadingInstruments","shouldHideInstrumentExpiryDate","shouldShow","find","instrument","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","shouldShowNumberField","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","style","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument","useMemo","placement","tooltip","isCardExpiryRequired","shape","required","hostedForm","test","message","value","cardExpiryVerification","checkoutService","rest","hostedStoredCardValidationSchema","getHostedInstrumentValidationSchema","hidePaymentSubmitButton","disableSubmit","data","getInstruments","getCheckout","statuses","checkout","customer","getCustomer","isGuest","Boolean","isVaultingEnabled","initializeMonerisPayment","options","paymentConfig","moneris","form","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","some","payments","providerId","signOut","signOutCustomer","_shouldShowNumber","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","container","document","createElement","parentContainer","getElementById","appendChild","Provider","isSubmitted","hasError","ref","element","parentElement","removeChild","testId","cardExpiryId"],"sourceRoot":""}