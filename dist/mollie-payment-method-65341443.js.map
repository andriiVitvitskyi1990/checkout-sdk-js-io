{"version":3,"file":"mollie-payment-method-65341443.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps, useField } from 'formik';\nimport React, {\n    type FunctionComponent,\n    type SyntheticEvent,\n    useCallback,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    type CardInstrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn, some } from 'lodash';\nimport React, {\n    type FunctionComponent,\n    type ReactNode,\n    useCallback,\n    useContext,\n    useState,\n} from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","HostedWidgetPaymentComponent","Component","state","isAddingNewCard","handleDeleteInstrument","instruments","setFieldValue","this","props","selectedInstrumentId","length","setState","undefined","getDefaultInstrumentId","handleUseNewCard","deinitializePayment","initializePayment","noop","method","gatewayId","gateway","methodId","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","onUnhandledError","setValidationSchema","getValidationSchema","initializeMethod","error","componentDidUpdate","prevProps","prevState","isPaymentDataRequired","componentWillUnmount","deinitializeCustomer","setSubmit","render","hideWidget","isInitializing","isAccountInstrument","isLoadingInstruments","shouldHideInstrumentExpiryDate","shouldShow","selectedInstrument","find","instrument","bigpayToken","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","instrumentId","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredProp","shouldShowNumberField","containerId","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","style","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument","useMemo","placement","tooltip","language","isCardExpiryRequired","shape","required","hostedForm","errors","cardCodeVerification","test","message","translate","value","cardNumberVerification","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","type","Default","container","document","createElement","parentContainer","getElementById","Error","appendChild","Provider","isSubmitted","setSubmitted","hasError","Focus","ref","element","parentElement","removeChild","HiddenInput","field","restField","selectedIssuer","_","helpers","Input","useEffect","setValue","IssuerSelectButton","href","preventDefault","OptionButton","issuer","image","alt","src","size1x","withLanguage","issuers","initializationData","paymentMethodsResponse","setSelectedIssuer","useState","handleClick","currentTarget","_selectedIssuer","dataset","issuersList","map","key","DropdownTrigger","dropdown","FormField","options","isCreditCard","htmlFor","cardNumberElementOptions","TranslatedString","cardHolderElementOptions","cardCvcElementOptions","TooltipTrigger","CreditCardCodeTooltip","IconHelp","cardExpiryElementOptions","MolliePaymentMethodType","toResolvableComponent","checkoutState","checkoutService","paymentForm","paymentContext","useContext","PaymentFormContext","localeContext","LocaleContext","focusedFieldType","setFocusedFieldType","setFieldTouched","submitForm","hidePaymentSubmitButton","disableSubmit","isInstrumentCardCodeRequiredProp","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","config","cardCode","isCardCodeRequired","getHostedFieldId","compact","join","getHostedFormOptions","styleProps","isInstrumentCardCodeRequired","styleContainerId","fields","accessibilityLabel","cardExpiry","placeholder","cardName","cardNumber","styles","default","focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","HostedCreditCardValidation","cardCodeId","cardNumberId","initializeMolliePayment","mollieElements","getMolliesElementOptions","mollie","cardCvcId","cardHolderId","cardExpiryId","base","color","valid","invalid","unsupportedMethodMessage","disableButton","disabled","form","creditcard","data","getInstruments","getCheckout","getCustomer","statuses","checkout","customer","isGuest","Boolean","isVaultingEnabled","some","payments","providerId","signOut","signOutCustomer","getHostedInstrumentValidationSchema","_shouldShowNumber","testId"],"sourceRoot":""}