{"version":3,"file":"bolt-payment-method-e9008866.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CheckoutService, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import { type CustomerInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createBoltCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/bolt';\nimport React, { type FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const initializeBoltCustomer = useCallback(\n        (options: CustomerInitializeOptions) => {\n            return checkoutService.initializeCustomer({\n                ...options,\n                integrations: [createBoltCustomerStrategy],\n            });\n        },\n        [checkoutService],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializeCustomer={initializeBoltCustomer}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            updateFieldValue(selectedInstrumentId);\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","checkoutService","checkoutState","isUsingMultiShipping","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","isInstrumentFeatureAvailable","id","gateway","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","HostedWidgetPaymentComponent","Component","state","isAddingNewCard","handleDeleteInstrument","setFieldValue","this","selectedInstrumentId","setState","getDefaultInstrumentId","handleUseNewCard","componentDidMount","setValidationSchema","getValidationSchema","initializeMethod","componentDidUpdate","prevProps","prevState","componentWillUnmount","deinitializeCustomer","setSubmit","render","hideWidget","shouldHideInstrumentExpiryDate","shouldShow","shouldShowCreditCardFieldset","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequiredProp","shouldShowNumberField","containerId","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","style","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","PROVIDERS_WITHOUT_CARD_CODE","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","isInstrumentCardCodeRequired","rest","initializeBoltPayment","options","bolt","useBigCommerceCheckout","HostedPaymentComponent","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","labelContent","TranslatedHtml","map","key","TranslatedString","CheckboxFormField","additionalClassName","name","showCreateAccountCheckbox","paymentForm","setShowCreateAccountCheckbox","boltEmbeddedContainerId","hidePaymentSubmitButton","disableSubmit","onPaymentSelect","hasBoltAccount","initializeBoltCustomer","integrations","isInitializingPayment","isGuestCustomer","isGuest","Boolean","isVaultingEnabled","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","signOut","signOutCustomer","embeddedOneClickEnabled","InstrumentMenuItem","testId","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","handleClick","InstrumentUseNewButton","InstrumentMenu","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","setTimeout","value","current","DropdownTrigger","dropdown","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","checkoutSettings","isCardVaultingEnabled"],"sourceRoot":""}