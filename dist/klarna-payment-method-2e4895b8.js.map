{"version":3,"file":"klarna-payment-method-2e4895b8.js","mappings":"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","sources":["webpack://checkout/./packages/klarna-integration/src/klarna/KlarnaPaymentMethod.tsx","webpack://checkout/./packages/klarna-integration/src/klarnav2/KlarnaV2PaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx"],"sourcesContent":["import { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarna: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaPayment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaPaymentMethod,\n    [{ id: 'klarna' }],\n);\n","import { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst KlarnaV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const initializeKlarnaV2Payment = useCallback(\n        (options: any) =>\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            checkoutService.initializePayment({\n                ...options,\n                klarnav2: {\n                    container: `#${options.methodId}Widget`,\n                },\n            }),\n        [checkoutService],\n    );\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId={`${method.id}Widget`}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeKlarnaV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    KlarnaV2PaymentMethod,\n    [{ gateway: 'klarna' }],\n);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            updateFieldValue(selectedInstrumentId);\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n"],"names":["toResolvableComponent","checkoutService","checkoutState","method","paymentForm","rest","initializeKlarnaPayment","useCallback","options","initializePayment","klarna","container","methodId","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","instruments","data","getInstruments","getCheckout","isPaymentDataRequired","statuses","isLoadingInstruments","checkout","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","Boolean","config","isVaultingEnabled","HostedWidgetPaymentComponent","containerId","id","deinitializePayment","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredSelector","isSignedIn","some","payments","providerId","loadInstruments","signOut","signOutCustomer","initializeKlarnaV2Payment","klarnav2","gateway","mapFromInstrumentCardType","type","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","Component","state","isAddingNewCard","handleDeleteInstrument","this","props","selectedInstrumentId","setState","undefined","getDefaultInstrumentId","handleUseNewCard","noop","gatewayId","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailableProp","onUnhandledError","getValidationSchema","initializeMethod","error","componentDidUpdate","prevProps","prevState","componentWillUnmount","deinitializeCustomer","render","hideWidget","isInitializing","isAccountInstrument","shouldHideInstrumentExpiryDate","shouldShow","selectedInstrument","find","bigpayToken","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","instrumentId","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequiredProp","shouldShowNumberField","hideContentWhenSignedOut","isSignInRequired","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","style","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument","PROVIDERS_WITHOUT_CARD_CODE","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","InstrumentMenuItem","testId","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","handleClick","InstrumentUseNewButton","InstrumentMenu","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","name","useEffect","setTimeout","value","current","DropdownTrigger","dropdown","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField"],"sourceRoot":""}