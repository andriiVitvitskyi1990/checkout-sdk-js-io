{"version":3,"file":"amazon-pay-v2-button-428c02c5.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx","webpack://checkout/./packages/payment-integration-api/src/contexts/payment-form-context/PaymentFormContext.tsx","webpack://checkout/./packages/ui/src/icon/CreditCardIcon.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2Button.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isHTMLElement/isHTMLElement.ts","webpack://checkout/./packages/ui/src/icon/mapFromPaymentMethodCardType.ts"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedWidgetComponentState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentComponent extends Component<\n    HostedWidgetComponentProps & PaymentContextProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        prevProps: Readonly<\n            HostedWidgetComponentProps & WithCheckoutHostedWidgetPaymentMethodProps\n        >,\n        prevState: Readonly<HostedWidgetPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            instruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n            isPaymentDataRequired,\n        } = this.props;\n\n        const { selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            (prevProps.instruments.length > 0 && instruments.length === 0) ||\n            prevProps.isPaymentDataRequired !== isPaymentDataRequired\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            hideWidget = false,\n            isInitializing = false,\n            isAccountInstrument,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldHideInstrumentExpiryDate = false,\n            shouldShow = true,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId = this.getDefaultInstrumentId() } =\n            this.state;\n\n        if (!shouldShow) {\n            return null;\n        }\n\n        const selectedInstrument =\n            instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n            instruments[0];\n\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n\n        const selectedAccountInstrument = this.getSelectedBankAccountInstrument(\n            isAddingNewCard,\n            selectedInstrument,\n        );\n        const shouldShowAccountInstrument =\n            instruments[0] && isBankAccountInstrument(instruments[0]);\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod--hosted\">\n                    {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as AccountInstrument[]}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrument={selectedAccountInstrument}\n                        />\n                    )}\n\n                    {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                            instruments={instruments as CardInstrument[]}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                            validateInstrument={this.getValidateInstrument()}\n                        />\n                    )}\n\n                    {this.renderPaymentDescriptorIfAvailable()}\n\n                    {this.renderContainer(shouldShowCreditCardFieldset)}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrumentId}\n                            instruments={instruments}\n                            isAccountInstrument={isAccountInstrument || shouldShowAccountInstrument}\n                        />\n                    )}\n\n                    {this.renderEditButtonIfAvailable()}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode {\n        const {\n            hideVerificationFields,\n            instruments,\n            method,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, {\n            bigpayToken: selectedInstrumentId,\n        });\n\n        if (selectedInstrument) {\n            assertIsCardInstrument(selectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequiredProp(\n                selectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, selectedInstrument);\n            }\n        }\n    }\n\n    renderContainer(shouldShowCreditCardFieldset: any): ReactNode {\n        const {\n            containerId,\n            hideContentWhenSignedOut = false,\n            hideWidget,\n            isSignInRequired = false,\n            isSignedIn,\n            method,\n            additionalContainerClassName,\n            shouldRenderCustomInstrument = false,\n            renderCustomPaymentForm,\n        } = this.props;\n\n        return (\n            <div\n                className={classNames(\n                    'widget',\n                    `widget--${method.id}`,\n                    'payment-widget',\n                    shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n                )}\n                id={containerId}\n                style={{\n                    display:\n                        (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                        !shouldShowCreditCardFieldset ||\n                        hideWidget\n                            ? 'none'\n                            : undefined,\n                }}\n                tabIndex={-1}\n            >\n                {shouldRenderCustomInstrument &&\n                    renderCustomPaymentForm &&\n                    renderCustomPaymentForm()}\n            </div>\n        );\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }\n\n    private getSelectedInstrument(): PaymentInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const { instruments, setFieldValue } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n\n    private getSelectedBankAccountInstrument(\n        isAddingNewCard: boolean,\n        selectedInstrument: PaymentInstrument,\n    ): AccountInstrument | undefined {\n        return !isAddingNewCard && isBankAccountInstrument(selectedInstrument)\n            ? selectedInstrument\n            : undefined;\n    }\n\n    private renderEditButtonIfAvailable() {\n        const { shouldShowEditButton, buttonId } = this.props;\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        if (shouldShowEditButton) {\n            return (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n                        <a\n                            className={classNames('stepHeader', 'widget-link-amazonpay')}\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {translatedString}\n                        </a>\n                    }\n                </p>\n            );\n        }\n    }\n\n    private renderPaymentDescriptorIfAvailable() {\n        const { shouldShowDescriptor, paymentDescriptor } = this.props;\n\n        if (shouldShowDescriptor && paymentDescriptor) {\n            return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n        }\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            instruments,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId(), isAddingNewCard } =\n            this.state;\n\n        let selectedInstrument;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        if (!isAddingNewCard) {\n            selectedInstrument =\n                instruments.find((instrument) => instrument.bigpayToken === selectedInstrumentId) ||\n                instruments[0];\n        }\n\n        return initializePayment(\n            {\n                gatewayId: method.gateway,\n                methodId: method.id,\n            },\n            selectedInstrument,\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const { deinitializePayment, initializePayment = noop, method } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport default HostedWidgetPaymentComponent;\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            updateFieldValue(selectedInstrumentId);\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n    integrations,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n","import { createContext, useContext } from 'react';\n\nimport type PaymentMethodProps from '../../PaymentMethodProps';\n\nexport type PaymentFormContextProps = Pick<PaymentMethodProps, 'paymentForm'>;\n\nexport const PaymentFormContext = createContext<PaymentFormContextProps | undefined>(undefined);\n\nexport function usePaymentFormContext() {\n    const context = useContext(PaymentFormContext);\n\n    if (!context) {\n        throw new Error('usePaymentFormContext must be used within a PaymentFormContextProvider');\n    }\n\n    return context;\n}\n","import React, { type FunctionComponent, memo, Suspense } from 'react';\n\nimport { getPaymentMethodIconComponent } from './mapFromPaymentMethodCardType';\nimport { IconSize } from './withIconContainer';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({ cardType }) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    const IconComponent = getPaymentMethodIconComponent(cardType);\n\n    return IconComponent ? (\n        <Suspense>\n            <IconComponent {...iconProps} />\n        </Suspense>\n    ) : (\n        <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />\n    );\n};\n\nexport default memo(CreditCardIcon);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import { createAmazonPayV2CustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/amazon-pay';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport { isHTMLElement } from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst beautifyAmazonButton = (): void => {\n    if (!document.querySelector('.checkout-button-container')) {\n        return;\n    }\n\n    const container = document.querySelector('#amazonpayCheckoutButton > div');\n\n    if (container) {\n        const amazonButton = container.shadowRoot?.querySelector('.amazonpay-button-view1');\n\n        if (isHTMLElement(amazonButton)) {\n            amazonButton.style.height = '36px';\n\n            return;\n        }\n    }\n\n    setTimeout(beautifyAmazonButton, 10);\n};\n\nconst AmazonPayV2Button: FunctionComponent<CheckoutButtonProps> = (props) => {\n    useEffect(() => {\n        beautifyAmazonButton();\n    }, []);\n\n    return (\n        <div className=\"AmazonPayContainer\">\n            <CheckoutButton integrations={[createAmazonPayV2CustomerStrategy]} {...props} />\n        </div>\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    AmazonPayV2Button,\n    [{ id: 'amazonpay' }],\n);\n","export default function isHTMLElement(element: unknown): element is HTMLElement {\n    return element instanceof HTMLElement;\n}\n","import { type ComponentType, lazy } from 'react';\n\nimport { type IconProps } from './';\n\ninterface InstrumentComponent {\n    instrument: string;\n    component: ComponentType<IconProps>;\n}\n\nconst instrumentTypeMap: Record<string, InstrumentComponent> = {\n    AMEX: {\n        instrument: 'american-express',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-amex\" */ './IconCardAmex')),\n    },\n    BITCOIN: {\n        instrument: 'bitcoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-bitcoin\" */ './IconBitCoin')),\n    },\n    BITCOIN_CASH: {\n        instrument: 'bitcoin-cash',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-bitcoin-cash\" */ './IconBitCoinCash'),\n        ),\n    },\n    BANCONTACT: {\n        instrument: 'bancontact',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-bancontact\" */ './IconCardBancontact'),\n        ),\n    },\n    CARNET: {\n        instrument: 'carnet',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-carnet\" */ './IconCardCarnet'),\n        ),\n    },\n    CB: {\n        instrument: 'cb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-cb\" */ './IconCardCB')),\n    },\n    DINERS: {\n        instrument: 'diners-club',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-diners-club\" */ './IconCardDinersClub'),\n        ),\n    },\n    DANKORT: {\n        instrument: 'dankort',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-dankort\" */ './IconCardDankort'),\n        ),\n    },\n    DISCOVER: {\n        instrument: 'discover',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-discover\" */ './IconCardDiscover'),\n        ),\n    },\n    DOGECOIN: {\n        instrument: 'dogecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-dogecoin\" */ './IconDogeCoin')),\n    },\n    ELECTRON: {\n        instrument: 'electron',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-electron\" */ './IconCardElectron'),\n        ),\n    },\n    ELO: {\n        instrument: 'elo',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-elo\" */ './IconCardElo')),\n    },\n    ETHEREUM: {\n        instrument: 'ethereum',\n        component: lazy(() => import(/* webpackChunkName: \"icon-ethereum\" */ './IconEthereum')),\n    },\n    HIPER: {\n        instrument: 'hiper',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-hipercard\" */ './IconCardHipercard'),\n        ),\n    },\n    JCB: {\n        instrument: 'jcb',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-jcb\" */ './IconCardJCB')),\n    },\n    LITECOIN: {\n        instrument: 'litecoin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-litecoin\" */ './IconLiteCoin')),\n    },\n    MADA: {\n        instrument: 'mada',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-mada\" */ './IconCardMada')),\n    },\n    MAESTRO: {\n        instrument: 'maestro',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-maestro\" */ './IconCardMaestro'),\n        ),\n    },\n    MC: {\n        instrument: 'mastercard',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-mastercard\" */ './IconCardMastercard'),\n        ),\n    },\n    SHIBA_INU: {\n        instrument: 'shiba-inu',\n        component: lazy(() => import(/* webpackChunkName: \"icon-shiba-inu\" */ './IconShibaInu')),\n    },\n    TROY: {\n        instrument: 'troy',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-troy\" */ './IconCardTroy')),\n    },\n    CUP: {\n        instrument: 'unionpay',\n        component: lazy(\n            () => import(/* webpackChunkName: \"icon-card-unionpay\" */ './IconCardUnionPay'),\n        ),\n    },\n    USD_COIN: {\n        instrument: 'usd-coin',\n        component: lazy(() => import(/* webpackChunkName: \"icon-usd-coin\" */ './IconUsdCoin')),\n    },\n    VISA: {\n        instrument: 'visa',\n        component: lazy(() => import(/* webpackChunkName: \"icon-card-visa\" */ './IconCardVisa')),\n    },\n};\n\nexport default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return instrumentTypeMap[type]?.instrument || undefined;\n}\n\nexport function getPaymentMethodIconComponent(type?: string): ComponentType<IconProps> | undefined {\n    if (!type) {\n        return undefined;\n    }\n\n    const instrumentType = Object.values(instrumentTypeMap).find(\n        (record) => record.instrument === type,\n    );\n\n    return instrumentType ? instrumentType.component : undefined;\n}\n\nfunction getSupportedInstrumentTypes() {\n    return Object.values(instrumentTypeMap).map((record) => record.instrument);\n}\n\nexport function filterInstrumentTypes(instrumentTypes: string[]) {\n    const supportedInstrumentTypes = getSupportedInstrumentTypes();\n\n    return instrumentTypes.filter((type) => supportedInstrumentTypes.includes(type));\n}\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","HostedWidgetPaymentComponent","Component","state","isAddingNewCard","handleDeleteInstrument","id","instruments","setFieldValue","this","props","selectedInstrumentId","setState","undefined","getDefaultInstrumentId","handleUseNewCard","deinitializePayment","initializePayment","noop","method","gatewayId","gateway","methodId","handleSelectInstrument","componentDidMount","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","onUnhandledError","setValidationSchema","getValidationSchema","initializeMethod","error","componentDidUpdate","prevProps","prevState","isPaymentDataRequired","componentWillUnmount","deinitializeCustomer","setSubmit","render","hideWidget","isInitializing","isAccountInstrument","isLoadingInstruments","shouldHideInstrumentExpiryDate","shouldShow","selectedInstrument","find","bigpayToken","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","selectedAccountInstrument","getSelectedBankAccountInstrument","shouldShowAccountInstrument","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","onDeleteInstrument","shouldHideExpiryDate","validateInstrument","getValidateInstrument","renderPaymentDescriptorIfAvailable","renderContainer","instrumentId","renderEditButtonIfAvailable","hideVerificationFields","isInstrumentCardNumberRequiredProp","shouldShowNumberField","containerId","hideContentWhenSignedOut","isSignInRequired","isSignedIn","additionalContainerClassName","shouldRenderCustomInstrument","renderCustomPaymentForm","style","display","tabIndex","storedCardValidationSchema","getSelectedInstrument","shouldShowEditButton","buttonId","translatedString","onClick","shouldShowDescriptor","paymentDescriptor","initializeCustomer","signInCustomer","Promise","resolve","defaultInstrument","PROVIDERS_WITHOUT_CARD_CODE","config","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","isInstrumentCardCodeRequired","InstrumentMenuItem","testId","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","handleClick","useCallback","InstrumentUseNewButton","InstrumentMenu","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","name","useEffect","setTimeout","value","current","DropdownTrigger","dropdown","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","checkoutService","checkoutButtonContainerClass","onWalletButtonClick","additionalInitializationOptions","integrations","container","Error","PaymentFormContext","createContext","usePaymentFormContext","context","useContext","iconProps","size","Medium","IconComponent","Suspense","toResolvableComponent","checkoutState","paymentForm","paymentToken","rest","initializeAmazonPayV2Payment","options","amazonpay","editButtonId","reload","window","location","hidePaymentSubmitButton","disableSubmit","getCheckout","statuses","checkout","customer","getCustomer","isGuest","Boolean","isVaultingEnabled","getInstruments","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","some","payments","providerId","onSignOut","signOut","signOutCustomer","beautifyAmazonButton","document","querySelector","amazonButton","shadowRoot","HTMLElement","height","CheckoutButton","instrumentTypeMap","AMEX","component","lazy","BITCOIN","BITCOIN_CASH","BANCONTACT","CARNET","CB","DINERS","DANKORT","DISCOVER","DOGECOIN","ELECTRON","ELO","ETHEREUM","HIPER","JCB","LITECOIN","MADA","MAESTRO","MC","SHIBA_INU","TROY","CUP","USD_COIN","VISA","mapFromPaymentMethodCardType","getPaymentMethodIconComponent","instrumentType","Object","values","record","filterInstrumentTypes","instrumentTypes","supportedInstrumentTypes","filter"],"sourceRoot":""}